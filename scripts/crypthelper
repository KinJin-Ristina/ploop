#!/bin/sh
export PATH="/usr/bin:/usr/sbin:/bin:/sbin"
CRYPTSETUP=/usr/sbin/cryptsetup
CRYPT_D=/usr/libexec/ploop/crypt.d
GETKEY=$CRYPT_D/getkey
KEY_FNAME=

cleanup()
{
	if [ -n "$KEY_FNAME" ]; then
		rm -f $KEY_FNAME
	fi
}

check_key()
{
	if [ ! -e $GETKEY ]; then
		echo "The key request plugin '$GETKEY' is not installed"
		exit 2
	fi
}

check_rc()
{
	if [ $1 -ne 0 ]; then
		echo "$2 rc=$1" >&2
		exit $3
	fi
}

check_pipe_rc()
{
	rc=${PIPESTATUS[0]}
	check_rc $1 "$1" "$2"
	check_rc $rc "$1" "$2"
}

init()
{
	check_key
	$GETKEY $KEYID | $CRYPTSETUP luksFormat $DEVICE -
	check_pipe_rc $? "Cannot format $DEVICE" 3
}

open()
{
	check_key
	$GETKEY $KEYID | $CRYPTSETUP --key-file - --allow-discards luksOpen $DEVICE $DEVICE_NAME
	check_pipe_rc $? "Cannot open $DEVICE $DEVICE_NAME" 4
}

close()
{
	for ((i=0; i<60; i++)); do
		$CRYPTSETUP luksClose $DEVICE_NAME
		rc=$?
		if [ $rc -eq 0 ]; then
			exit 0
		elif [ $rc -ne 5 ]; then
			echo "Cannot close $DEVICE_NAME rc=$rc"
			exit 5
		fi
		sleep 1
	done
	exit 5
}

resize()
{
	$CRYPTSETUP resize $DEVICE_NAME
	check_rc $? "Cannot resize $DEVICE_NAME" 6
}

changekey()
{
	check_key
	KEY_FNAME=`mktemp`
	check_rc $? "Cannot mktemp" 7
	trap cleanup EXIT
	$GETKEY $KEYID > $KEY_FNAME
	check_rc $? "Cannot store key at $FNAME" 7
	$GETKEY $DEVICE_NAME | $CRYPTSETUP --key-file $KEY_FNAME luksChangeKey $DEVICE -
	check_pipe_rc $? "Cannot change the key $KEYID" 7
}

case "$1" in
init)
	init
	;;
open)
	open
	;;
resize)
	resize
	;;
close)
	close
	;;
changekey)
	changekey
	;;
*)
	exit 1
esac
